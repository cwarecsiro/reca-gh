conda = 'C:\\Users\\war42q\\AppData\\Local\\Continuum\\Anaconda3\\python.exe'
if(file.exists(conda)){
pth = c(pth, conda)
}
if(is.null(pth)){
warning(sprintf('%s %s',
'Cannot locate a version of python.',
'A variable exe needs to be available pointing to a python .exe'))
} else {
exe <<- pth[1]
}
exe
pth
pth = unname(Sys.which('python'))
pth = unname(Sys.which('python'))
if (pth == ''){
pth = NULL
}
conda = 'C:\\Users\\war42q\\AppData\\Local\\Continuum\\Anaconda3\\python.exe'
if(file.exists(conda)){
pth = c(pth, conda)
}
if(is.null(pth)){
warning(sprintf('%s %s',
'Cannot locate a version of python.',
'A variable exe needs to be available pointing to a python .exe'))
} else {
exe <<- pth[1]
}
exe
call = sprintf('%s %s -f %s -s %s -m %s -e %s -w %s -src %s',
exe,
src, f, s, m, e, 15, src_g)
call
system(call, intern = TRUE)
system(call, intern = TRUE)
system(call, intern = TRUE)
system(call, intern = TRUE)
system(call, intern = TRUE)
system(call, intern = TRUE)
system(call, intern = TRUE)
system(call, intern = TRUE)
system(call, intern = TRUE)
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##
## Make R package for gdm workflow
##
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## This first part of the code can just be hightlighted and run as a block
## starting here -->
## package libs
library(devtools)
library(roxygen2)
library(Rcpp)
update_build = function(){
pkg_root = '//lw-osm-02-cdc/OSM_CBR_LW_BACKCAST_work/code/reca-gh/gdmtables/dyno_climo_window'
## write DESCRIPTION file
DESCRIPTION = c('Package: dyno_climo_window',
'Version: 0.01',
paste('Date:', Sys.Date()),
'Title: Climate windows for obspair gdm',
'Description: Create dynamic climate windows for gdm pairs',
paste('Author:', unname(Sys.info()['user'])),
'Maintainer: Chris Ware <chris.ware@csiro.au>',
'SystemRequirements: python3',
'Licence: errr',
#paste('Authors@R:', unname(Sys.info()['user']))
'Imports:
feather,
)
sink(paste(pkg_root, 'DESCRIPTION', sep = '/'))
cat(DESCRIPTION, sep = '\n')
sink()
## Build with devtools
setwd(pkg_root)
document()
build()
install(quick = TRUE, upgrade_dependencies = FALSE)
}
#file.exists('\\\\ces-10-cdc/OSM_CDC_MMRG_work/users/bitbucket/gdm_workflow/gdmEngine_0.01.tar.gz')
#install(pkg = '.', args = '-no-multiarch')
#system('R CMD INSTALL --library=Z:/users/bitbucket/gdm_workflow/gdmEngine gdmEngine_0.01.tar.gz ')
#get_latest = function(){
#  pkg_root = '//ces-10-cdc/OSM_CDC_MMRG_work/users/bitbucket/gdm_workflow'
#  setwd(pkg_root)
#  file.copy(paste0('gdmEngine'), .libPaths(), recursive = TRUE)
#  cat(paste0('gdmEngine copied to ', .libPaths()))
#  require(gdmEngine)
#}
## root
#pkg_root = '//ces-10-cdc/OSM_CDC_MMRG_work/users/bitbucket/gdm_workflow/gdmEngine'
## write DESCRIPTION file
#DESCRIPTION = c('Package: gdmEngine',
#                'Version: 0.01',
#                paste('Date:', Sys.Date()),
#                'Title: Workflow for GDM',
#                'Description: Functions used to develop GDMs',
#                paste('Author:', unname(Sys.info()['user'])),
#                'Maintainer: Chris Ware <chris.ware@csiro.au>',
#                'SystemRequirements: git with shell distribution'
#                #paste('Authors@R:', unname(Sys.info()['user']))
#                )
#sink(paste(pkg_root, 'DESCRIPTION', sep = '/'))
#cat(DESCRIPTION, sep = '\n')
#sink()
## Build with devtools
#setwd(pkg_root)
#document()
#build()
#install()
## check() update examples before this is run
## <-- ending here
library(devtools)
library(roxygen2)
library(Rcpp)
update_build = function(){
pkg_root = '//lw-osm-02-cdc/OSM_CBR_LW_BACKCAST_work/code/reca-gh/gdmtables/dyno_climo_window'
## write DESCRIPTION file
DESCRIPTION = c('Package: dyno_climo_window',
'Version: 0.01',
paste('Date:', Sys.Date()),
'Title: Climate windows for obspair gdm',
'Description: Create dynamic climate windows for gdm pairs',
paste('Author:', unname(Sys.info()['user'])),
'Maintainer: Chris Ware <chris.ware@csiro.au>',
'SystemRequirements: python3',
'Licence: errr',
#paste('Authors@R:', unname(Sys.info()['user']))
'Imports:
feather,
)
sink(paste(pkg_root, 'DESCRIPTION', sep = '/'))
cat(DESCRIPTION, sep = '\n')
sink()
## Build with devtools
setwd(pkg_root)
document()
build()
install(quick = TRUE, upgrade_dependencies = FALSE)
}
DESCRIPTION = c('Package: dyno_climo_window',
'Version: 0.01',
paste('Date:', Sys.Date()),
'Title: Climate windows for obspair gdm',
'Description: Create dynamic climate windows for gdm pairs',
paste('Author:', unname(Sys.info()['user'])),
'Maintainer: Chris Ware <chris.ware@csiro.au>',
'SystemRequirements: python3',
'Licence: errr',
#paste('Authors@R:', unname(Sys.info()['user']))
'Imports:
feather,
)
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##
## Make R package for gdm workflow
##
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## This first part of the code can just be hightlighted and run as a block
## starting here -->
## package libs
library(devtools)
library(roxygen2)
library(Rcpp)
update_build = function(){
pkg_root = '//lw-osm-02-cdc/OSM_CBR_LW_BACKCAST_work/code/reca-gh/gdmtables/dyno_climo_window'
## write DESCRIPTION file
DESCRIPTION = c('Package: dyno_climo_window',
'Version: 0.01',
paste('Date:', Sys.Date()),
'Title: Climate windows for obspair gdm',
'Description: Create dynamic climate windows for gdm pairs',
paste('Author:', unname(Sys.info()['user'])),
'Maintainer: Chris Ware <chris.ware@csiro.au>',
'SystemRequirements: python3',
'Licence: errr',
#paste('Authors@R:', unname(Sys.info()['user']))
'Imports:
feather,'
)
sink(paste(pkg_root, 'DESCRIPTION', sep = '/'))
cat(DESCRIPTION, sep = '\n')
sink()
## Build with devtools
setwd(pkg_root)
document()
build()
install(quick = TRUE, upgrade_dependencies = FALSE)
}
#file.exists('\\\\ces-10-cdc/OSM_CDC_MMRG_work/users/bitbucket/gdm_workflow/gdmEngine_0.01.tar.gz')
#install(pkg = '.', args = '-no-multiarch')
#system('R CMD INSTALL --library=Z:/users/bitbucket/gdm_workflow/gdmEngine gdmEngine_0.01.tar.gz ')
#get_latest = function(){
#  pkg_root = '//ces-10-cdc/OSM_CDC_MMRG_work/users/bitbucket/gdm_workflow'
#  setwd(pkg_root)
#  file.copy(paste0('gdmEngine'), .libPaths(), recursive = TRUE)
#  cat(paste0('gdmEngine copied to ', .libPaths()))
#  require(gdmEngine)
#}
## root
#pkg_root = '//ces-10-cdc/OSM_CDC_MMRG_work/users/bitbucket/gdm_workflow/gdmEngine'
## write DESCRIPTION file
#DESCRIPTION = c('Package: gdmEngine',
#                'Version: 0.01',
#                paste('Date:', Sys.Date()),
#                'Title: Workflow for GDM',
#                'Description: Functions used to develop GDMs',
#                paste('Author:', unname(Sys.info()['user'])),
#                'Maintainer: Chris Ware <chris.ware@csiro.au>',
#                'SystemRequirements: git with shell distribution'
#                #paste('Authors@R:', unname(Sys.info()['user']))
#                )
#sink(paste(pkg_root, 'DESCRIPTION', sep = '/'))
#cat(DESCRIPTION, sep = '\n')
#sink()
## Build with devtools
#setwd(pkg_root)
#document()
#build()
#install()
## check() update examples before this is run
## <-- ending here
pkg_root = '//lw-osm-02-cdc/OSM_CBR_LW_BACKCAST_work/code/reca-gh/gdmtables/dyno_climo_window'
update_build = function(){
pkg_root = '//lw-osm-02-cdc/OSM_CBR_LW_BACKCAST_work/code/reca-gh/gdmtables/dyno_climo_window'
## write DESCRIPTION file
DESCRIPTION = c('Package: dyno_climo_window',
'Version: 0.01',
paste('Date:', Sys.Date()),
'Title: Climate windows for obspair gdm',
'Description: Create dynamic climate windows for gdm pairs',
paste('Author:', unname(Sys.info()['user'])),
'Maintainer: Chris Ware <chris.ware@csiro.au>',
'SystemRequirements: python3',
'Licence: errr',
#paste('Authors@R:', unname(Sys.info()['user']))
'Imports:
feather,'
)
sink(paste(pkg_root, 'DESCRIPTION', sep = '/'))
cat(DESCRIPTION, sep = '\n')
sink()
## Build with devtools
setwd(pkg_root)
document()
build()
install(quick = TRUE, upgrade_dependencies = FALSE)
}
update_build()
rm(list = ls())
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##
## Make R package for gdm workflow
##
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## This first part of the code can just be hightlighted and run as a block
## starting here -->
## package libs
library(devtools)
library(roxygen2)
library(Rcpp)
update_build()
update_build = function(){
pkg_root = '//lw-osm-02-cdc/OSM_CBR_LW_BACKCAST_work/code/reca-gh/gdmtables/dyno_climo_window'
## write DESCRIPTION file
DESCRIPTION = c('Package: dynowindow',
'Version: 0.01',
paste('Date:', Sys.Date()),
'Title: Climate windows for obspair gdm',
'Description: Create dynamic climate windows for gdm pairs',
paste('Author:', unname(Sys.info()['user'])),
'Maintainer: Chris Ware <chris.ware@csiro.au>',
'SystemRequirements: python3',
'Licence: errr',
#paste('Authors@R:', unname(Sys.info()['user']))
'Imports:
feather,'
)
sink(paste(pkg_root, 'DESCRIPTION', sep = '/'))
cat(DESCRIPTION, sep = '\n')
sink()
## Build with devtools
setwd(pkg_root)
document()
build()
install(quick = TRUE, upgrade_dependencies = FALSE)
}
#file.exists('\\\\ces-10-cdc/OSM_CDC_MMRG_work/users/bitbucket/gdm_workflow/gdmEngine_0.01.tar.gz')
#install(pkg = '.', args = '-no-multiarch')
#system('R CMD INSTALL --library=Z:/users/bitbucket/gdm_workflow/gdmEngine gdmEngine_0.01.tar.gz ')
#get_latest = function(){
#  pkg_root = '//ces-10-cdc/OSM_CDC_MMRG_work/users/bitbucket/gdm_workflow'
#  setwd(pkg_root)
#  file.copy(paste0('gdmEngine'), .libPaths(), recursive = TRUE)
#  cat(paste0('gdmEngine copied to ', .libPaths()))
#  require(gdmEngine)
#}
## root
#pkg_root = '//ces-10-cdc/OSM_CDC_MMRG_work/users/bitbucket/gdm_workflow/gdmEngine'
## write DESCRIPTION file
#DESCRIPTION = c('Package: gdmEngine',
#                'Version: 0.01',
#                paste('Date:', Sys.Date()),
#                'Title: Workflow for GDM',
#                'Description: Functions used to develop GDMs',
#                paste('Author:', unname(Sys.info()['user'])),
#                'Maintainer: Chris Ware <chris.ware@csiro.au>',
#                'SystemRequirements: git with shell distribution'
#                #paste('Authors@R:', unname(Sys.info()['user']))
#                )
#sink(paste(pkg_root, 'DESCRIPTION', sep = '/'))
#cat(DESCRIPTION, sep = '\n')
#sink()
## Build with devtools
#setwd(pkg_root)
#document()
#build()
#install()
## check() update examples before this is run
## <-- ending here
update_build()
update_build = function(){
pkg_root = '//lw-osm-02-cdc/OSM_CBR_LW_BACKCAST_work/code/reca-gh/gdmtables/dynowindow'
## write DESCRIPTION file
DESCRIPTION = c('Package: dynowindow',
'Version: 0.01',
paste('Date:', Sys.Date()),
'Title: Climate windows for obspair gdm',
'Description: Create dynamic climate windows for gdm pairs',
paste('Author:', unname(Sys.info()['user'])),
'Maintainer: Chris Ware <chris.ware@csiro.au>',
'SystemRequirements: python3',
'Licence: errr',
#paste('Authors@R:', unname(Sys.info()['user']))
'Imports:
feather,'
)
sink(paste(pkg_root, 'DESCRIPTION', sep = '/'))
cat(DESCRIPTION, sep = '\n')
sink()
## Build with devtools
setwd(pkg_root)
document()
build()
install(quick = TRUE, upgrade_dependencies = FALSE)
}
#file.exists('\\\\ces-10-cdc/OSM_CDC_MMRG_work/users/bitbucket/gdm_workflow/gdmEngine_0.01.tar.gz')
#install(pkg = '.', args = '-no-multiarch')
#system('R CMD INSTALL --library=Z:/users/bitbucket/gdm_workflow/gdmEngine gdmEngine_0.01.tar.gz ')
#get_latest = function(){
#  pkg_root = '//ces-10-cdc/OSM_CDC_MMRG_work/users/bitbucket/gdm_workflow'
#  setwd(pkg_root)
#  file.copy(paste0('gdmEngine'), .libPaths(), recursive = TRUE)
#  cat(paste0('gdmEngine copied to ', .libPaths()))
#  require(gdmEngine)
#}
## root
#pkg_root = '//ces-10-cdc/OSM_CDC_MMRG_work/users/bitbucket/gdm_workflow/gdmEngine'
## write DESCRIPTION file
#DESCRIPTION = c('Package: gdmEngine',
#                'Version: 0.01',
#                paste('Date:', Sys.Date()),
#                'Title: Workflow for GDM',
#                'Description: Functions used to develop GDMs',
#                paste('Author:', unname(Sys.info()['user'])),
#                'Maintainer: Chris Ware <chris.ware@csiro.au>',
#                'SystemRequirements: git with shell distribution'
#                #paste('Authors@R:', unname(Sys.info()['user']))
#                )
#sink(paste(pkg_root, 'DESCRIPTION', sep = '/'))
#cat(DESCRIPTION, sep = '\n')
#sink()
## Build with devtools
#setwd(pkg_root)
#document()
#build()
#install()
## check() update examples before this is run
## <-- ending here
update_build()
update_build()
update_build()
update_build = function(){
pkg_root = '//lw-osm-02-cdc/OSM_CBR_LW_BACKCAST_work/code/reca-gh/gdmtables/dynowindow'
## write DESCRIPTION file
DESCRIPTION = c('Package: dynowindow',
'Version: 0.01',
paste('Date:', Sys.Date()),
'Title: Climate windows for obspair gdm',
'Description: Create dynamic climate windows for gdm pairs',
paste('Author:', unname(Sys.info()['user'])),
'Maintainer: Chris Ware <chris.ware@csiro.au>',
'SystemRequirements: python3',
'Licence: errr',
#paste('Authors@R:', unname(Sys.info()['user']))
'Imports:
feather,'
)
sink(paste(pkg_root, 'DESCRIPTION', sep = '/'))
cat(DESCRIPTION, sep = '\n')
sink()
## Build with devtools
setwd(pkg_root)
document()
build()
install(quick = TRUE, upgrade_dependencies = FALSE)
}
update_build()
namesapce:feather
library(feather)
namesapce:feather
namespace:feather
.libPaths()
DESCRIPTION = c('Package: dynowindow',
'Version: 0.01',
paste('Date:', Sys.Date()),
'Title: Climate windows for obspair gdm',
'Description: Create dynamic climate windows for gdm pairs',
paste('Author:', unname(Sys.info()['user'])),
'Maintainer: Chris Ware <chris.ware@csiro.au>',
'SystemRequirements: python3',
'Licence: errr',
#paste('Authors@R:', unname(Sys.info()['user']))
'Imports:
feather,'
)
sink(paste(pkg_root, 'DESCRIPTION', sep = '/'))
cat(DESCRIPTION, sep = '\n')
sink()
sink(paste(pkg_root, 'DESCRIPTION', sep = '/'))
pkg_root = '//lw-osm-02-cdc/OSM_CBR_LW_BACKCAST_work/code/reca-gh/gdmtables/dynowindow'
DESCRIPTION = c('Package: dynowindow',
'Version: 0.01',
paste('Date:', Sys.Date()),
'Title: Climate windows for obspair gdm',
'Description: Create dynamic climate windows for gdm pairs',
paste('Author:', unname(Sys.info()['user'])),
'Maintainer: Chris Ware <chris.ware@csiro.au>',
'SystemRequirements: python3',
'Licence: errr',
#paste('Authors@R:', unname(Sys.info()['user']))
'Imports:
feather,'
)
sink(paste(pkg_root, 'DESCRIPTION', sep = '/'))
cat(DESCRIPTION, sep = '\n')
sink()
## Build with devtools
setwd(pkg_root)
document()
document()
build()
getwd()
?build
getwd()
build()
document('--R_LIBS_USER')
build('--R_LIBS_USER')
.libPaths()[2]
.libPaths()[1]
R_LIBS_USER = .libPaths()[2]
build()
#pkg_root = '//lw-osm-02-cdc/OSM_CBR_LW_BACKCAST_work/code/reca-gh/gdmtables/dynowindow'
pkg_root = 'R:/code/reca-gh/gdmtables/dynowindow'
DESCRIPTION = c('Package: dynowindow',
'Version: 0.01',
paste('Date:', Sys.Date()),
'Title: Climate windows for obspair gdm',
'Description: Create dynamic climate windows for gdm pairs',
paste('Author:', unname(Sys.info()['user'])),
'Maintainer: Chris Ware <chris.ware@csiro.au>',
'SystemRequirements: python3',
'Licence: errr',
#paste('Authors@R:', unname(Sys.info()['user']))
'Imports:
feather,'
)
sink(paste(pkg_root, 'DESCRIPTION', sep = '/'))
cat(DESCRIPTION, sep = '\n')
sink()
## Build with devtools
setwd(pkg_root)
document()
build()
install(quick = TRUE, upgrade_dependencies = FALSE)
# m = 'mean'
# e = 'ND_test'
# src_g = '//lw-osm-02-cdc/OSM_CBR_LW_BACKCAST_work/DEV/war42q/junk'
#
# call = sprintf('%s %s -f %s -s %s -m %s -e %s -w %s -src %s',
#                exe,
#                src, f, s, m, e, 15, src_g)
#
# system(call, intern = TRUE)
# file.exists('C:\\Users\\war42q\\AppData\\Local\\Temp\\tmp05aifbn8.feather')
.libPaths()
url = 'git+https://github.com/cwarecsiro/reca-gh/gdmtables/geonpy.git'
py = sprintf('python pip install --user %s', url)
py
Sys.getenv()
shell('setx PATH "C:\\Users\\war42q\\AppData\\Local\\Continuum\\Anaconda3\\python.exe"')
Sys.getenv()
x == Sys.getenv()
x = Sys.getenv()
x
class(x)
grep('python', x)
grep('win', x)
shell('setx PATH "C:\\Users\\war42q\\AppData\\Local\\Continuum\\Anaconda3\\python.exe"')
# windows
py_exe = Sys.which('python')
py_exe
